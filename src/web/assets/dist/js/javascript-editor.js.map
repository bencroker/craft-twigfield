{"version":3,"file":"js/javascript-editor.js","mappings":"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","sources":["webpack://Buildchain/../src/web/assets/src/js/autocomplete.js","webpack://Buildchain/../src/web/assets/src/js/twigfield.js"],"sourcesContent":["/**\n * Twigfield Craft CMS\n *\n * Provides a twig editor field with Twig & Craft API autocomplete\n *\n * @link      https://nystudio107.com\n * @copyright Copyright (c) 2022 nystudio107\n */\n\n/**\n * @author    nystudio107\n * @package   Twigfield\n * @since     1.0.0\n */\nconst COMPLETION_KEY = '__completions';\nconst AUTOCOMPLETE_CONTROLLER_ENDPOINT = 'twigfield/autocomplete/index';\n\n/**\n * Get the last item from the array\n *\n * @param arr\n * @returns {*}\n */\nfunction getLastItem(arr) {\n  return arr[arr.length - 1];\n}\n\n/**\n * Register completion items with the Monaco editor, for the Twig language\n *\n * @param completionItems\n */\nfunction addCompletionItemsToMonaco(completionItems) {\n  monaco.languages.registerCompletionItemProvider('twig', {\n    triggerCharacters: ['.', '('],\n    provideCompletionItems: function (model, position, token) {\n      let result = [];\n      // Get the last word the user has typed\n      const currentLine = model.getValueInRange({\n        startLineNumber: position.lineNumber,\n        startColumn: 0,\n        endLineNumber: position.lineNumber,\n        endColumn: position.column\n      });\n      // Ensure we're inside of a Twig expression\n      if (currentLine.indexOf('{') !== 0) {\n        return null;\n      }\n      const startExpression = currentLine.substring(currentLine.lastIndexOf('{'));\n      if (startExpression.indexOf('}') !== -1) {\n        return null;\n      }\n      const currentWords = currentLine.replace(\"\\t\", \"\").split(\" \");\n      let currentWord = currentWords[currentWords.length - 1];\n      // If the current word includes ( or >, split on that, too, to allow the autocomplete to work in nested functions and HTML tags\n      if (currentWord.includes('(')) {\n        currentWord = getLastItem(currentWord.split('('));\n      }\n      if (currentWord.includes('>')) {\n        currentWord = getLastItem(currentWord.split('>'));\n      }\n      const isSubProperty = currentWord.charAt(currentWord.length - 1) === \".\";\n      let currentItems = completionItems;\n      // If the last character typed is a period, then we need to look up a sub-property of the completionItems\n      if (isSubProperty) {\n        // Is a sub-property, get a list of parent properties\n        const parents = currentWord.substring(0, currentWord.length - 1).split(\".\");\n        currentItems = completionItems[parents[0]];\n        // Loop through all the parents to traverse the completion items and find the current one\n        for (let i = 1; i < parents.length; i++) {\n          if (currentItems.hasOwnProperty(parents[i])) {\n            currentItems = currentItems[parents[i]];\n          } else {\n            return result;\n          }\n        }\n      }\n      // Get all the child properties\n      if (typeof currentItems !== 'undefined') {\n        for (let item in currentItems) {\n          if (currentItems.hasOwnProperty(item) && !item.startsWith(\"__\")) {\n            const completionItem = currentItems[item][COMPLETION_KEY];\n            if (typeof completionItem !== 'undefined') {\n              // Monaco adds a 'range' to the object, to denote where the autocomplete is triggered from,\n              // which needs to be removed each time the autocomplete objects are re-used\n              delete completionItem.range;\n              // Add to final results\n              result.push(completionItem);\n            }\n          }\n        }\n      }\n\n      return {\n        suggestions: result\n      };\n    }\n  });\n}\n\n/**\n * Register hover items with the Monaco editor, for the Twig language\n *\n * @param completionItems\n */\nfunction addHoverHandlerToMonaco(completionItems) {\n  monaco.languages.registerHoverProvider('twig', {\n    provideHover: function (model, position) {\n      let result = {};\n      const currentLine = model.getValueInRange({\n        startLineNumber: position.lineNumber,\n        startColumn: 0,\n        endLineNumber: position.lineNumber,\n        endColumn: model.getLineMaxColumn(position.lineNumber)\n      });\n      const currentWord = model.getWordAtPosition(position);\n      if (currentWord === null) {\n        return;\n      }\n      let searchLine = currentLine.substring(0, currentWord.endColumn - 1)\n      let isSubProperty = false;\n      let currentItems = completionItems;\n      for (let i = searchLine.length; i >= 0; i--) {\n        if (searchLine[i] === ' ') {\n          searchLine = currentLine.substring(i + 1, searchLine.length);\n          break;\n        }\n      }\n      if (searchLine.includes('.')) {\n        isSubProperty = true;\n      }\n      if (isSubProperty) {\n        // Is a sub-property, get a list of parent properties\n        const parents = searchLine.substring(0, searchLine.length).split(\".\");\n        // Loop through all the parents to traverse the completion items and find the current one\n        for (let i = 0; i < parents.length - 1; i++) {\n          if (currentItems.hasOwnProperty(parents[i])) {\n            currentItems = currentItems[parents[i]];\n          } else {\n            return result;\n          }\n        }\n      }\n      if (typeof currentItems !== 'undefined' && typeof currentItems[currentWord.word] !== 'undefined') {\n        const completionItem = currentItems[currentWord.word][COMPLETION_KEY];\n        if (typeof completionItem !== 'undefined') {\n          return {\n            range: new monaco.Range(position.lineNumber, currentWord.startColumn, position.lineNumber, currentWord.endColum),\n            contents: [\n              {value: '**' + completionItem.detail + '**'},\n              {value: completionItem.documentation},\n            ]\n          }\n        }\n      }\n\n      return result;\n    }\n  });\n}\n\n/**\n * Fetch the autocompletion items from local storage, or from the endpoint if they aren't cached in local storage\n */\nfunction getCompletionItemsFromEndpoint(cacheKey) {\n  let urlParams = '';\n  if (typeof cacheKey !== 'undefined' && cacheKey !== null) {\n    urlParams = '?additionalCompletionsCacheKey=' + cacheKey;\n  }\n  // Ping the controller endpoint\n  let request = new XMLHttpRequest();\n  request.open('GET', Craft.getActionUrl(AUTOCOMPLETE_CONTROLLER_ENDPOINT + urlParams), true);\n  request.onload = function () {\n    if (request.status >= 200 && request.status < 400) {\n      const completionItems = JSON.parse(request.responseText);\n      addCompletionItemsToMonaco(completionItems);\n      addHoverHandlerToMonaco(completionItems);\n    } else {\n      console.log('Autocomplete endpoint failed with status ' + request.status)\n    }\n  };\n  request.send();\n}\n\nexport {getCompletionItemsFromEndpoint};\n","/**\n * Twigfield Craft CMS\n *\n * Provides a twig editor field with Twig & Craft API autocomplete\n *\n * @link      https://nystudio107.com\n * @copyright Copyright (c) 2022 nystudio107\n */\n\n/**\n * @author    nystudio107\n * @package   Twigfield\n * @since     1.0.0\n */\n// Set the __webpack_public_path__ dynamically so we can work inside of cpresources's hashed dir name\n// https://stackoverflow.com/questions/39879680/example-of-setting-webpack-public-path-at-runtime\nif (typeof __webpack_public_path__ !== 'string' || __webpack_public_path__ === '') {\n  __webpack_public_path__ = window.seomaticBaseAssetsUrl;\n}\n\nimport * as monaco from 'monaco-editor/esm/vs/editor/editor.api';\nimport {getCompletionItemsFromEndpoint} from '@/js/autocomplete.js';\n\n/* For now, use the default theme\n\nimport editorTheme from 'monaco-themes/themes/Night Owl.json';\n\nmonaco.editor.defineTheme('night-owl', editorTheme);\nmonaco.editor.setTheme('night-owl');\n*/\n\n// Create the editor\nfunction makeMonacoEditor(elementId, additionalCompletionsCacheKey) {\n  const textArea = document.getElementById(elementId);\n  let container = document.createElement('div');\n  // Make a sibling div for the Monaco editor to live in\n  container.id = elementId + '-monaco-editor';\n  container.classList.add('p-2', 'box-content', 'monaco-editor-background-frame', 'w-full', 'h-full');\n  container.tabIndex = 0;\n  textArea.parentNode.insertBefore(container, textArea);\n  textArea.style.display = 'none';\n  // Create the Monaco editor\n  let editor = monaco.editor.create(container, {\n    value: textArea.value,\n    language: 'twig',\n    automaticLayout: true,\n    // Disable sidebar line numbers\n    lineNumbers: 'off',\n    glyphMargin: false,\n    folding: false,\n    // Undocumented see https://github.com/Microsoft/vscode/issues/30795#issuecomment-410998882\n    lineDecorationsWidth: 0,\n    lineNumbersMinChars: 0,\n    // Disable the current line highlight\n    renderLineHighlight: false,\n    wordWrap: true,\n    scrollBeyondLastLine: false,\n    scrollbar: {\n      vertical: 'hidden',\n      horizontal: 'auto',\n    },\n    fontSize: 14,\n    fontFamily: 'SFMono-Regular, Consolas, \"Liberation Mono\", Menlo, Courier, monospace',\n    minimap: {\n      enabled: false\n    },\n  });\n  // Before the form is submitted, copy the changes from the editor to the field\n  document.querySelector(\"#main-form\").addEventListener(\"submit\", function (e) {\n    textArea.value = editor.getValue();\n  });\n  // Handle keyboard shortcuts too via beforeSaveShortcut\n  Craft.cp.on('beforeSaveShortcut', () => {\n    textArea.value = editor.getValue();\n  });\n  // The auto-complete items are global, so only grab them once per request\n  if (typeof window.monacoAutocompleteItemsAdded !== 'undefined') {\n    additionalCompletionsCacheKey = null;\n  }\n  // Get the autocompletion items\n  if (typeof additionalCompletionsCacheKey !== 'undefined' && additionalCompletionsCacheKey !== null) {\n    getCompletionItemsFromEndpoint(additionalCompletionsCacheKey);\n    window.monacoAutocompleteItemsAdded = true;\n  }\n  // Custom resizer to always keep the editor full-height, without needing to scroll\n  let ignoreEvent = false;\n  const updateHeight = () => {\n    const width = editor.getLayoutInfo().width;\n    const contentHeight = Math.min(1000, editor.getContentHeight());\n    //container.style.width = `${width}px`;\n    container.style.height = `${contentHeight}px`;\n    try {\n      ignoreEvent = true;\n      editor.layout({width, height: contentHeight});\n    } finally {\n      ignoreEvent = false;\n    }\n  };\n  editor.onDidContentSizeChange(updateHeight);\n  updateHeight();\n}\n\nwindow.makeMonacoEditor = makeMonacoEditor;\n\nexport default makeMonacoEditor;\n"],"names":["getLastItem","arr","length","getCompletionItemsFromEndpoint","cacheKey","urlParams","request","XMLHttpRequest","open","Craft","getActionUrl","onload","status","completionItems","JSON","parse","responseText","monaco","languages","registerCompletionItemProvider","triggerCharacters","provideCompletionItems","model","position","token","result","currentLine","getValueInRange","startLineNumber","lineNumber","startColumn","endLineNumber","endColumn","column","indexOf","substring","lastIndexOf","currentWords","replace","split","currentWord","includes","isSubProperty","charAt","currentItems","parents","i","hasOwnProperty","item","startsWith","completionItem","range","push","suggestions","addCompletionItemsToMonaco","registerHoverProvider","provideHover","getLineMaxColumn","getWordAtPosition","searchLine","word","Range","endColum","contents","value","detail","documentation","addHoverHandlerToMonaco","console","log","send","makeMonacoEditor","elementId","additionalCompletionsCacheKey","textArea","document","getElementById","container","createElement","id","classList","add","tabIndex","parentNode","insertBefore","style","display","editor","language","automaticLayout","lineNumbers","glyphMargin","folding","lineDecorationsWidth","lineNumbersMinChars","renderLineHighlight","wordWrap","scrollBeyondLastLine","scrollbar","vertical","horizontal","fontSize","fontFamily","minimap","enabled","querySelector","addEventListener","e","getValue","cp","on","window","monacoAutocompleteItemsAdded","updateHeight","width","getLayoutInfo","contentHeight","Math","min","getContentHeight","height","layout","onDidContentSizeChange","__webpack_public_path__","seomaticBaseAssetsUrl"],"sourceRoot":""}