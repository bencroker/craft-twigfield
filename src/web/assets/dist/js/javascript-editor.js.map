{"version":3,"file":"js/javascript-editor.js","mappings":";;;;;;;;oMAuBA,SAASA,EAAYC,GACnB,OAAOA,EAAIA,EAAIC,OAAS,GAQ1B,SAASC,EAA2BC,EAAiBC,GACnDC,OAAOC,UAAUC,+BAA+B,OAAQ,CACtDC,kBAAmB,CAAC,IAAK,KACzBC,uBAAwB,SAAUC,EAAOC,EAAUC,GACjD,IAAIC,EAAS,GACTC,EAAeX,EAEbY,EAAcL,EAAMM,gBAAgB,CACxCC,gBAAiBN,EAASO,WAC1BC,YAAa,EACbC,cAAeT,EAASO,WACxBG,UAAWV,EAASW,SAElBC,GAAmB,EAUvB,GARiC,IAA7BR,EAAYS,QAAQ,OACtBD,GAAmB,IAGiB,IADdR,EAAYU,UAAUV,EAAYW,YAAY,MAClDF,QAAQ,OAC1BD,GAAmB,IAGhBA,GAAyC,+BAArBnB,EACvB,OAAO,KAGT,GAAImB,GAAyC,+BAArBnB,EAAmD,CACzE,IAAMuB,EAAeZ,EAAYa,QAAQ,KAAM,IAAIC,MAAM,KACrDC,EAAcH,EAAaA,EAAa1B,OAAS,GAUrD,GARI6B,EAAYC,SAAS,OACvBD,EAAc/B,EAAY+B,EAAYD,MAAM,OAE1CC,EAAYC,SAAS,OACvBD,EAAc/B,EAAY+B,EAAYD,MAAM,OAEuB,MAA/CC,EAAYE,OAAOF,EAAY7B,OAAS,GAE3C,CAEjB,IAAMgC,EAAUH,EAAYL,UAAU,EAAGK,EAAY7B,OAAS,GAAG4B,MAAM,KACvEf,EAAeX,EAAgB8B,EAAQ,IAEvC,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAQhC,OAAQiC,IAAK,CACvC,IAAIpB,EAAaqB,eAAeF,EAAQC,IAGtC,OAAOrB,EAFPC,EAAeA,EAAamB,EAAQC,MAQ5C,QAA4B,IAAjBpB,EACT,IAAK,IAAIsB,KAAQtB,EACf,GAAIA,EAAaqB,eAAeC,KAAUA,EAAKC,WAAW,MAAO,CAC/D,IAAMC,EAAiBxB,EAAasB,GAAb,cACvB,QAA8B,IAAnBE,EAAgC,CAIzC,UADOA,EAAeC,MAClB,kBAAmBD,EAAgB,CACrC,IAAIE,EAAOF,EAAeG,cAC1BH,EAAeG,cAAgB,CAC7BC,MAAOF,EACPG,WAAW,EACXC,cAAc,GAIlB/B,EAAOgC,KAAKP,IAMpB,MAAO,CACLQ,YAAajC,MAWrB,SAASkC,EAAwB5C,GAC/BE,OAAOC,UAAU0C,sBAAsB,OAAQ,CAC7CC,aAAc,SAAUvC,EAAOC,GAC7B,IAAIE,EAAS,GACPE,EAAcL,EAAMM,gBAAgB,CACxCC,gBAAiBN,EAASO,WAC1BC,YAAa,EACbC,cAAeT,EAASO,WACxBG,UAAWX,EAAMwC,iBAAiBvC,EAASO,cAEvCY,EAAcpB,EAAMyC,kBAAkBxC,GAC5C,GAAoB,OAAhBmB,EAAJ,CAMA,IAHA,IAAIsB,EAAarC,EAAYU,UAAU,EAAGK,EAAYT,UAAY,GAC9DgC,GAAgB,EAChBvC,EAAeX,EACV+B,EAAIkB,EAAWnD,OAAQiC,GAAK,EAAGA,IACtC,GAAsB,MAAlBkB,EAAWlB,GAAY,CACzBkB,EAAarC,EAAYU,UAAUS,EAAI,EAAGkB,EAAWnD,QACrD,MAMJ,GAHImD,EAAWrB,SAAS,OACtBsB,GAAgB,GAEdA,EAIF,IAFA,IAAMpB,EAAUmB,EAAW3B,UAAU,EAAG2B,EAAWnD,QAAQ4B,MAAM,KAExDK,EAAI,EAAGA,EAAID,EAAQhC,OAAS,EAAGiC,IAAK,CAC3C,IAAIpB,EAAaqB,eAAeF,EAAQC,IAGtC,OAAOrB,EAFPC,EAAeA,EAAamB,EAAQC,IAM1C,QAA4B,IAAjBpB,QAA0E,IAAnCA,EAAagB,EAAYwB,MAAuB,CAChG,IAAMhB,EAAiBxB,EAAagB,EAAYwB,MAAzB,cACvB,QAA8B,IAAnBhB,EACT,MAAO,CACLC,MAAO,IAAIlC,OAAOkD,MAAM5C,EAASO,WAAYY,EAAYX,YAAaR,EAASO,WAAYY,EAAY0B,UACvGC,SAAU,CACR,CAACf,MAAO,KAAOJ,EAAeoB,OAAS,MACvC,CAAChB,MAAOJ,EAAeG,cAAcC,SAM7C,OAAO7B,MC5Ib,SAAS8C,EAAiBC,EAAWC,EAAWC,GAC9C,IAAMC,EAAWC,SAASC,eAAeL,GACrCM,EAAYF,SAASG,cAAc,OAEvCD,EAAUE,GAAKR,EAAY,iBAC3BM,EAAUG,UAAUC,IAAI,MAAO,cAAe,+BAAgC,SAAU,UACnE,KAAjBR,GACFI,EAAUG,UAAUC,IAAIR,GAE1BI,EAAUK,SAAW,EACrBR,EAASS,WAAWC,aAAaP,EAAWH,GAC5CA,EAASW,MAAMC,QAAU,OAEzB,IAAIC,EAASvE,EAAAA,OAAAA,OAAqB6D,EAAW,CAC3CxB,MAAOqB,EAASrB,MAChBmC,SAAU,OACVC,MAAO,KACPC,iBAAiB,EAEjBC,YAAa,MACbC,aAAa,EACbC,SAAS,EAETC,qBAAsB,EACtBC,oBAAqB,EAErBC,qBAAqB,EACrBC,UAAU,EACVC,sBAAsB,EACtBC,UAAW,CACTC,SAAU,SACVC,WAAY,QAEdC,SAAU,GACVC,WAAY,yEACZC,QAAS,CACPC,SAAS,KAGbzF,EAAAA,OAAAA,SAAuB,aAGvBuE,EAAOmB,yBAAwB,SAACC,GAC9BjC,EAASrB,MAAQkC,EAAOqB,cAG1BC,MAAMC,GAAGC,GAAG,sBAAsB,WAChCrC,EAASrB,MAAQkC,EAAOqB,cDqG5B,SAAwCpC,GACtC,IAAIwC,EAAY,GACZ,MAAOxC,IACTwC,EAAY,cAAgBxC,GAG9B,IAAIyC,EAAU,IAAIC,eAClBD,EAAQE,KAAK,MAAON,MAAMO,aA5Ka,+BA4KmCJ,IAAY,GACtFC,EAAQI,OAAS,WACf,GAAIJ,EAAQK,QAAU,KAAOL,EAAQK,OAAS,IAAK,CACjD,IAAMxG,EAAkByG,KAAKC,MAAMP,EAAQQ,mBACG,IAAnCC,OAAOC,0BAChBD,OAAOC,wBAA0B,IAEnC,IAAK,IAAL,MAAmCC,OAAOC,QAAQ/G,GAAlD,eAAoE,CAA/D,sBAAagH,GAAb,WACGA,EAAaC,QAAQL,OAAOC,0BAChCD,OAAOC,wBAAwBG,EAAaC,MAAQD,EAAaC,KACjElH,EAA2BiH,EAAaE,cAAeF,EAAaG,MACpEvE,EAAwBoE,EAAaE,sBAIzCE,QAAQC,IAAI,4CAA8ClB,EAAQK,SAGtEL,EAAQmB,OC3HRC,CAA+B7D,GAE/B,IACM8D,EAAe,WACnB,IAAMC,EAAQhD,EAAOiD,gBAAgBD,MAC/BE,EAAgBC,KAAKC,IAAI,IAAMpD,EAAOqD,oBAE5C/D,EAAUQ,MAAMwD,OAAhB,UAA4BJ,EAA5B,MACA,KACgB,EACdlD,EAAOuD,OAAO,CAACP,MAAAA,EAAOM,OAAQJ,IAFhC,SAIgB,IAGlBlD,EAAOwD,uBAAuBT,GAC9BA,IAlF6E,KAA5BU,EAAAA,IACjDA,EAAAA,EAA0BtB,OAAOuB,wBAoFnCvB,OAAOpD,iBAAmBA,G","sources":["webpack://Buildchain/../src/web/assets/src/js/autocomplete.js","webpack://Buildchain/../src/web/assets/src/js/twigfield.js"],"sourcesContent":["/**\n * Twigfield Craft CMS\n *\n * Provides a twig editor field with Twig & Craft API autocomplete\n *\n * @link      https://nystudio107.com\n * @copyright Copyright (c) 2022 nystudio107\n */\n\n/**\n * @author    nystudio107\n * @package   Twigfield\n * @since     1.0.0\n */\nconst COMPLETION_KEY = '__completions';\nconst AUTOCOMPLETE_CONTROLLER_ENDPOINT = 'twigfield/autocomplete/index';\n\n/**\n * Get the last item from the array\n *\n * @param arr\n * @returns {*}\n */\nfunction getLastItem(arr) {\n  return arr[arr.length - 1];\n}\n\n/**\n * Register completion items with the Monaco editor, for the Twig language\n *\n * @param completionItems\n */\nfunction addCompletionItemsToMonaco(completionItems, autocompleteType) {\n  monaco.languages.registerCompletionItemProvider('twig', {\n    triggerCharacters: ['.', '('],\n    provideCompletionItems: function (model, position, token) {\n      let result = [];\n      let currentItems = completionItems;\n      // Get the last word the user has typed\n      const currentLine = model.getValueInRange({\n        startLineNumber: position.lineNumber,\n        startColumn: 0,\n        endLineNumber: position.lineNumber,\n        endColumn: position.column\n      });\n      let inTwigExpression = true;\n      // Ensure we're inside of a Twig expression\n      if (currentLine.indexOf('{') !== 0) {\n        inTwigExpression = false;\n      }\n      const startExpression = currentLine.substring(currentLine.lastIndexOf('{'));\n      if (startExpression.indexOf('}') !== -1) {\n        inTwigExpression = false;\n      }\n      // We are not in a Twig expression, and this is a TwigExpressionAutocomplete, return nothing\n      if (!inTwigExpression && autocompleteType === 'TwigExpressionAutocomplete') {\n        return null;\n      }\n      // We are in a Twig expression, handle TwigExpressionAutocomplete by walking through the properties\n      if (inTwigExpression && autocompleteType === 'TwigExpressionAutocomplete') {\n        const currentWords = currentLine.replace(\"\\t\", \"\").split(\" \");\n        let currentWord = currentWords[currentWords.length - 1];\n        // If the current word includes ( or >, split on that, too, to allow the autocomplete to work in nested functions and HTML tags\n        if (currentWord.includes('(')) {\n          currentWord = getLastItem(currentWord.split('('));\n        }\n        if (currentWord.includes('>')) {\n          currentWord = getLastItem(currentWord.split('>'));\n        }\n        const isSubProperty = currentWord.charAt(currentWord.length - 1) === \".\";\n        // If the last character typed is a period, then we need to look up a sub-property of the completionItems\n        if (isSubProperty) {\n          // Is a sub-property, get a list of parent properties\n          const parents = currentWord.substring(0, currentWord.length - 1).split(\".\");\n          currentItems = completionItems[parents[0]];\n          // Loop through all the parents to traverse the completion items and find the current one\n          for (let i = 1; i < parents.length; i++) {\n            if (currentItems.hasOwnProperty(parents[i])) {\n              currentItems = currentItems[parents[i]];\n            } else {\n              return result;\n            }\n          }\n        }\n      }\n      // Get all the child properties\n      if (typeof currentItems !== 'undefined') {\n        for (let item in currentItems) {\n          if (currentItems.hasOwnProperty(item) && !item.startsWith(\"__\")) {\n            const completionItem = currentItems[item][COMPLETION_KEY];\n            if (typeof completionItem !== 'undefined') {\n              // Monaco adds a 'range' to the object, to denote where the autocomplete is triggered from,\n              // which needs to be removed each time the autocomplete objects are re-used\n              delete completionItem.range;\n              if ('documentation' in completionItem) {\n                let docs = completionItem.documentation;\n                completionItem.documentation = {\n                  value: docs,\n                  isTrusted: true,\n                  supportsHtml: true\n                }\n              }\n              // Add to final results\n              result.push(completionItem);\n            }\n          }\n        }\n      }\n\n      return {\n        suggestions: result\n      };\n    }\n  });\n}\n\n/**\n * Register hover items with the Monaco editor, for the Twig language\n *\n * @param completionItems\n */\nfunction addHoverHandlerToMonaco(completionItems) {\n  monaco.languages.registerHoverProvider('twig', {\n    provideHover: function (model, position) {\n      let result = {};\n      const currentLine = model.getValueInRange({\n        startLineNumber: position.lineNumber,\n        startColumn: 0,\n        endLineNumber: position.lineNumber,\n        endColumn: model.getLineMaxColumn(position.lineNumber)\n      });\n      const currentWord = model.getWordAtPosition(position);\n      if (currentWord === null) {\n        return;\n      }\n      let searchLine = currentLine.substring(0, currentWord.endColumn - 1)\n      let isSubProperty = false;\n      let currentItems = completionItems;\n      for (let i = searchLine.length; i >= 0; i--) {\n        if (searchLine[i] === ' ') {\n          searchLine = currentLine.substring(i + 1, searchLine.length);\n          break;\n        }\n      }\n      if (searchLine.includes('.')) {\n        isSubProperty = true;\n      }\n      if (isSubProperty) {\n        // Is a sub-property, get a list of parent properties\n        const parents = searchLine.substring(0, searchLine.length).split(\".\");\n        // Loop through all the parents to traverse the completion items and find the current one\n        for (let i = 0; i < parents.length - 1; i++) {\n          if (currentItems.hasOwnProperty(parents[i])) {\n            currentItems = currentItems[parents[i]];\n          } else {\n            return result;\n          }\n        }\n      }\n      if (typeof currentItems !== 'undefined' && typeof currentItems[currentWord.word] !== 'undefined') {\n        const completionItem = currentItems[currentWord.word][COMPLETION_KEY];\n        if (typeof completionItem !== 'undefined') {\n          return {\n            range: new monaco.Range(position.lineNumber, currentWord.startColumn, position.lineNumber, currentWord.endColum),\n            contents: [\n              {value: '**' + completionItem.detail + '**'},\n              {value: completionItem.documentation.value},\n            ]\n          }\n        }\n      }\n\n      return result;\n    }\n  });\n}\n\n/**\n * Fetch the autocompletion items from local storage, or from the endpoint if they aren't cached in local storage\n */\nfunction getCompletionItemsFromEndpoint(fieldType) {\n  let urlParams = '';\n  if (typeof fieldType !== 'undefined' && fieldType !== null) {\n    urlParams = '?fieldType=' + fieldType;\n  }\n  // Ping the controller endpoint\n  let request = new XMLHttpRequest();\n  request.open('GET', Craft.getActionUrl(AUTOCOMPLETE_CONTROLLER_ENDPOINT + urlParams), true);\n  request.onload = function () {\n    if (request.status >= 200 && request.status < 400) {\n      const completionItems = JSON.parse(request.responseText);\n      if (typeof window.monacoAutocompleteItems === 'undefined') {\n        window.monacoAutocompleteItems = {};\n      }\n      for (const [name, autocomplete] of Object.entries(completionItems)) {\n        if (!(autocomplete.name in window.monacoAutocompleteItems)) {\n          window.monacoAutocompleteItems[autocomplete.name] = autocomplete.name;\n          addCompletionItemsToMonaco(autocomplete.__completions, autocomplete.type);\n          addHoverHandlerToMonaco(autocomplete.__completions);\n        }\n      }\n    } else {\n      console.log('Autocomplete endpoint failed with status ' + request.status)\n    }\n  };\n  request.send();\n}\n\nexport {getCompletionItemsFromEndpoint};\n","/**\n * Twigfield Craft CMS\n *\n * Provides a twig editor field with Twig & Craft API autocomplete\n *\n * @link      https://nystudio107.com\n * @copyright Copyright (c) 2022 nystudio107\n */\n\n/**\n * @author    nystudio107\n * @package   Twigfield\n * @since     1.0.0\n */\n// Set the __webpack_public_path__ dynamically so we can work inside of cpresources's hashed dir name\n// https://stackoverflow.com/questions/39879680/example-of-setting-webpack-public-path-at-runtime\nif (typeof __webpack_public_path__ !== 'string' || __webpack_public_path__ === '') {\n  __webpack_public_path__ = window.twigfieldBaseAssetsUrl;\n}\n\nimport * as monaco from 'monaco-editor/esm/vs/editor/editor.api';\nimport {getCompletionItemsFromEndpoint} from '@/js/autocomplete.js';\n\n/* For now, use the default theme\n\nimport editorTheme from 'monaco-themes/themes/Night Owl.json';\n\nmonaco.editor.defineTheme('night-owl', editorTheme);\nmonaco.editor.setTheme('night-owl');\n*/\n\n// Create the editor\nfunction makeMonacoEditor(elementId, fieldType, wrapperClass) {\n  const textArea = document.getElementById(elementId);\n  let container = document.createElement('div');\n  // Make a sibling div for the Monaco editor to live in\n  container.id = elementId + '-monaco-editor';\n  container.classList.add('p-2', 'box-content', 'monaco-editor-twigfield-icon', 'w-full', 'h-full');\n  if (wrapperClass !== '') {\n    container.classList.add(wrapperClass);\n  }\n  container.tabIndex = 0;\n  textArea.parentNode.insertBefore(container, textArea);\n  textArea.style.display = 'none';\n  // Create the Monaco editor\n  let editor = monaco.editor.create(container, {\n    value: textArea.value,\n    language: 'twig',\n    theme: 'vs',\n    automaticLayout: true,\n    // Disable sidebar line numbers\n    lineNumbers: 'off',\n    glyphMargin: false,\n    folding: false,\n    // Undocumented see https://github.com/Microsoft/vscode/issues/30795#issuecomment-410998882\n    lineDecorationsWidth: 0,\n    lineNumbersMinChars: 0,\n    // Disable the current line highlight\n    renderLineHighlight: false,\n    wordWrap: true,\n    scrollBeyondLastLine: false,\n    scrollbar: {\n      vertical: 'hidden',\n      horizontal: 'auto',\n    },\n    fontSize: 14,\n    fontFamily: 'SFMono-Regular, Consolas, \"Liberation Mono\", Menlo, Courier, monospace',\n    minimap: {\n      enabled: false\n    },\n  });\n  monaco.editor.setTheme('twigfield');\n\n  // When the text is changed in the editor, sync it to the underlying TextArea input\n  editor.onDidChangeModelContent((event) => {\n    textArea.value = editor.getValue();\n  });\n  // Handle keyboard shortcuts too via beforeSaveShortcut\n  Craft.cp.on('beforeSaveShortcut', () => {\n    textArea.value = editor.getValue();\n  });\n  // Get the autocompletion items\n  getCompletionItemsFromEndpoint(fieldType);\n  // Custom resizer to always keep the editor full-height, without needing to scroll\n  let ignoreEvent = false;\n  const updateHeight = () => {\n    const width = editor.getLayoutInfo().width;\n    const contentHeight = Math.min(1000, editor.getContentHeight());\n    //container.style.width = `${width}px`;\n    container.style.height = `${contentHeight}px`;\n    try {\n      ignoreEvent = true;\n      editor.layout({width, height: contentHeight});\n    } finally {\n      ignoreEvent = false;\n    }\n  };\n  editor.onDidContentSizeChange(updateHeight);\n  updateHeight();\n}\n\nwindow.makeMonacoEditor = makeMonacoEditor;\n\nexport default makeMonacoEditor;\n"],"names":["getLastItem","arr","length","addCompletionItemsToMonaco","completionItems","autocompleteType","monaco","languages","registerCompletionItemProvider","triggerCharacters","provideCompletionItems","model","position","token","result","currentItems","currentLine","getValueInRange","startLineNumber","lineNumber","startColumn","endLineNumber","endColumn","column","inTwigExpression","indexOf","substring","lastIndexOf","currentWords","replace","split","currentWord","includes","charAt","parents","i","hasOwnProperty","item","startsWith","completionItem","range","docs","documentation","value","isTrusted","supportsHtml","push","suggestions","addHoverHandlerToMonaco","registerHoverProvider","provideHover","getLineMaxColumn","getWordAtPosition","searchLine","isSubProperty","word","Range","endColum","contents","detail","makeMonacoEditor","elementId","fieldType","wrapperClass","textArea","document","getElementById","container","createElement","id","classList","add","tabIndex","parentNode","insertBefore","style","display","editor","language","theme","automaticLayout","lineNumbers","glyphMargin","folding","lineDecorationsWidth","lineNumbersMinChars","renderLineHighlight","wordWrap","scrollBeyondLastLine","scrollbar","vertical","horizontal","fontSize","fontFamily","minimap","enabled","onDidChangeModelContent","event","getValue","Craft","cp","on","urlParams","request","XMLHttpRequest","open","getActionUrl","onload","status","JSON","parse","responseText","window","monacoAutocompleteItems","Object","entries","autocomplete","name","__completions","type","console","log","send","getCompletionItemsFromEndpoint","updateHeight","width","getLayoutInfo","contentHeight","Math","min","getContentHeight","height","layout","onDidContentSizeChange","__webpack_public_path__","twigfieldBaseAssetsUrl"],"sourceRoot":""}